// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import frc.robot.Constants;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climber extends SubsystemBase {
    private CANSparkMax climberLeft;
    private CANSparkMax climberRight;

    private double climberLeftZeroOffset = 0;
    private double climberRightZeroOffset = 0;
    private boolean limit = true;

    public Climber() {
        climberLeft = new CANSparkMax(Constants.ArmConstants.climberLeftId, MotorType.kBrushless);
        climberLeft.setInverted(false);
        climberLeft.setIdleMode(IdleMode.kBrake);

        climberRight = new CANSparkMax(Constants.ArmConstants.climberRightId, MotorType.kBrushless);
        climberRight.setInverted(true);
        climberRight.setIdleMode(IdleMode.kBrake);
    
        resetEncoderClimberLeft();
        resetEncoderClimberRight();
    }

    public void resetEncoderClimberLeft(){
        climberLeftZeroOffset = climberLeft.getEncoder().getPosition();
    }
    public void resetEncoderClimberRight(){
        climberRightZeroOffset = climberRight.getEncoder().getPosition();
    }

    public double getPositionLeft(){

        return climberLeft.getEncoder().getPosition() - climberLeftZeroOffset;

    }

    public double getPositionRight(){

        return climberRight.getEncoder().getPosition() - climberRightZeroOffset;

    }
    public void disableLimit(){
        limit = false;

    }
    public void enableLimit(){
        limit = true;

    }
    public void CMDteleOp(CommandXboxController driveController){
        if(limit){

        if(driveController.a().getAsBoolean() && getPositionLeft() > Constants.ArmConstants.climberMinPosition){
            climberLeft.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
        }
        else if(driveController.y().getAsBoolean() && getPositionLeft() < Constants.ArmConstants.climberMaxPosition){
            climberLeft.set(Constants.ArmConstants.climberSpeedHYPERUP);
        }
        else if(driveController.b().getAsBoolean() && getPositionLeft() < Constants.ArmConstants.climberMaxPosition ){
            climberLeft.set(Constants.ArmConstants.climberSpeedUp);       
        }
        else if(driveController.x().getAsBoolean() && getPositionLeft() > Constants.ArmConstants.climberMinPosition){
            climberLeft.set(Constants.ArmConstants.climberSpeedDown);       
        }
        else{
            climberLeft.set(0);    
        }

        if(driveController.povDown().getAsBoolean() && getPositionRight() > Constants.ArmConstants.climberMinPosition){
            climberRight.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
        }
        else if(driveController.povUp().getAsBoolean() && getPositionRight() < Constants.ArmConstants.climberMaxPosition){
            climberRight.set(Constants.ArmConstants.climberSpeedHYPERUP);
        }
        else if(driveController.povRight().getAsBoolean() && getPositionRight() < Constants.ArmConstants.climberMaxPosition){
            climberRight.set(Constants.ArmConstants.climberSpeedUp);       
        }
        else if(driveController.povLeft().getAsBoolean() && getPositionRight() > Constants.ArmConstants.climberMinPosition){
            climberRight.set(Constants.ArmConstants.climberSpeedDown);       
        }
        else{
            climberRight.set(0);    
        }

    } 

    else{
    if(driveController.a().getAsBoolean()){
            climberLeft.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
        }
        else if(driveController.y().getAsBoolean()){
            climberLeft.set(Constants.ArmConstants.climberSpeedHYPERUP);
        }
        else if(driveController.b().getAsBoolean()){
            climberLeft.set(Constants.ArmConstants.climberSpeedUp);       
        }
        else if(driveController.x().getAsBoolean()){
            climberLeft.set(Constants.ArmConstants.climberSpeedDown);       
        }
        else{
            climberLeft.set(0);    
        }

        if(driveController.povDown().getAsBoolean()){
            climberRight.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
        }
        else if(driveController.povUp().getAsBoolean()){
            climberRight.set(Constants.ArmConstants.climberSpeedHYPERUP);
        }
        else if(driveController.povRight().getAsBoolean()){
            climberRight.set(Constants.ArmConstants.climberSpeedUp);       
        }
        else if(driveController.povLeft().getAsBoolean()){
            climberRight.set(Constants.ArmConstants.climberSpeedDown);       
        }
        else{
            climberRight.set(0);    
        }
    
    }
    }
    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

