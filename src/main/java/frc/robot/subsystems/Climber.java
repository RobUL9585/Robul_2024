// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import frc.robot.Constants;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climber extends SubsystemBase {
    private CANSparkMax climberLeftBack;
    private CANSparkMax climberLeftFront;
    private CANSparkMax climberRightBack;
    private CANSparkMax climberRightFront;


    public Climber() {
        climberLeftBack = new CANSparkMax(Constants.ArmConstants.climberLeftBackId, MotorType.kBrushless);
        climberLeftBack.setInverted(true);
        climberLeftBack.setIdleMode(IdleMode.kBrake);

        climberLeftFront = new CANSparkMax(Constants.ArmConstants.climberLeftFrontId, MotorType.kBrushless);
        climberLeftFront.setInverted(false);
        climberLeftFront.setIdleMode(IdleMode.kBrake);

        climberRightFront = new CANSparkMax(Constants.ArmConstants.climberRightFrontId, MotorType.kBrushless);
        climberRightFront.setInverted(false);
        climberRightFront.setIdleMode(IdleMode.kBrake);

        climberRightBack = new CANSparkMax(Constants.ArmConstants.climberRightBackId, MotorType.kBrushless);
        climberRightBack.setInverted(false);
        climberRightBack.setIdleMode(IdleMode.kBrake);
    }

    public void CMDteleOp(CommandXboxController driveController){
        if(driveController.a().getAsBoolean()){
            climberLeftBack.set(Constants.ArmConstants.climberSpeedDown);
            climberLeftFront.set(Constants.ArmConstants.climberSpeedDown);
            climberRightBack.set(Constants.ArmConstants.climberSpeedDown);
            climberRightFront.set(Constants.ArmConstants.climberSpeedDown);
        }
        else if(driveController.y().getAsBoolean()){
            climberLeftBack.set(Constants.ArmConstants.climberSpeedUp);
            climberLeftFront.set(Constants.ArmConstants.climberSpeedUp);
            climberRightBack.set(Constants.ArmConstants.climberSpeedUp);
            climberRightFront.set(Constants.ArmConstants.climberSpeedUp);
        }
        else if(driveController.b().getAsBoolean()){
            climberLeftBack.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
            climberLeftFront.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
            climberRightBack.set(Constants.ArmConstants.climberSpeedHYPERDOWN);
            climberRightFront.set(Constants.ArmConstants.climberSpeedHYPERDOWN);       
        }


    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

