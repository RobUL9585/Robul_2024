// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.RobotMath;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftFront;
private CANSparkMax leftBack;
private CANSparkMax rightFront;
private CANSparkMax rightBack;


//hodne HODNE MOC temporalni reseni
private CANSparkMax intakeLeft;
private CANSparkMax intakeRight;
private CANSparkMax intakeSpin;
private CANSparkMax shooterLower;
private CANSparkMax shooterHigher;


private double rightFrontPower = 0;
private double rightBackPower = 0;
private double leftFrontPower = 0;
private double leftBackPower = 0;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFront = new CANSparkMax(Constants.DriveConstants.leftFrontId, MotorType.kBrushless);
leftFront.setInverted(true);
leftFront.setSmartCurrentLimit(35);
leftFront.setIdleMode(IdleMode.kBrake);
leftFront.burnFlash();
leftBack = new CANSparkMax(Constants.DriveConstants.leftBackId, MotorType.kBrushless);
leftBack.setInverted(true);
leftBack.setSmartCurrentLimit(35);
leftBack.setIdleMode(IdleMode.kBrake);
leftBack.burnFlash();
rightFront = new CANSparkMax(Constants.DriveConstants.rightFrontId, MotorType.kBrushless);
rightFront.setInverted(false);
rightFront.setSmartCurrentLimit(35);
rightFront.setIdleMode(IdleMode.kBrake);
rightFront.burnFlash();
rightBack = new CANSparkMax(Constants.DriveConstants.rightBackId, MotorType.kBrushless);
rightBack.setInverted(false);
rightBack.setSmartCurrentLimit(35);
rightBack.setIdleMode(IdleMode.kBrake);
rightBack.burnFlash();






    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void CMDteleOp(CommandXboxController driveController, CommandXboxController armController) {
        
        //tank drive
         //doDrive(-1* driveController.getLeftY(), driveController.getLeftX(), driveController.getRightTriggerAxis()*0.6);

        //mecanum drive
         doDrive(-1* driveController.getLeftY(), driveController.getRightX(), driveController.getLeftX(),
            RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);

        //mechanum drive using pov (šipky)
    /* 
        if(driveController.povUp().getAsBoolean()){
            doDrive(1, driveController.getRightX(), 0,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povUpLeft().getAsBoolean()){
            doDrive(1, driveController.getRightX(), -1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povLeft().getAsBoolean()){
            doDrive(0, driveController.getRightX(), -1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povDownLeft().getAsBoolean()){
            doDrive(-1, driveController.getRightX(), -1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povDown().getAsBoolean()){
            doDrive(-1, driveController.getRightX(), 0,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povDownRight().getAsBoolean()){
            doDrive(-1, driveController.getRightX(), 1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povRight().getAsBoolean()){
            doDrive(0, driveController.getRightX(), 1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else if(driveController.povUpRight().getAsBoolean()){
            doDrive(1, driveController.getRightX(), 1,
           RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        else{
            doDrive(0, driveController.getRightX(), 0, RobotMath.getSqRtValue(driveController.getRightTriggerAxis())*Constants.DriveConstants.maxSpeed);
        }
        */

        //mecanum bez odmocniny
        //doDrive(-1* driveController.getLeftY(), driveController.getRightX(), driveController.getLeftX(),
          // driveController.getRightTriggerAxis()*Constants.DriveConstants.maxSpeed);

           
       

    

     }

    //pozitvní turn = po směru hodinových ručiček
   /* public void doDrive(double forward, double turn, double speed){
        leftFrontPower = forward - turn;
        leftBackPower = forward - turn;
        rightFrontPower = forward + turn;
        rightBackPower = forward + turn;
        
        scaleMotorPowers(getMaxMotorPower());
        
        leftFrontPower *= speed;
        leftBackPower *= speed;
        rightFrontPower *= speed;
        rightBackPower *= speed;

        setMotorPowers();

    }
 */
    //pro mecanum drive
    public void doDrive(double forward, double turn, double strafe, double speed){
        leftFrontPower = forward - turn + strafe;
        leftBackPower = forward - turn - strafe;
        rightFrontPower = forward + turn - strafe;
        rightBackPower = forward + turn + strafe;
        
        scaleMotorPowers(getMaxMotorPower());
        
        leftFrontPower *= speed;
        leftBackPower *= speed;
        rightFrontPower *= speed;
        rightBackPower *= speed;

        setMotorPowers();
    }


    public double getMaxMotorPower(){
        double maxValue = -5;
        if(Math.abs(leftFrontPower)>maxValue){
            maxValue = Math.abs(leftFrontPower);
        }
        if(Math.abs(leftBackPower)>maxValue){
            maxValue = Math.abs(leftBackPower);
        }
        if(Math.abs(rightFrontPower)>maxValue){
            maxValue = Math.abs(rightFrontPower);
        }
        if(Math.abs(rightBackPower)>maxValue){
            maxValue = Math.abs(rightBackPower);
        }

        return maxValue;
    }

    public void scaleMotorPowers(double maxValue){
        if(maxValue>1){
            leftFrontPower /= maxValue;
            leftBackPower /= maxValue;
            rightFrontPower /= maxValue;
            rightBackPower /= maxValue;
        }
    }

    public void setMotorPowers(){
        leftFront.set(leftFrontPower);
        leftBack.set(leftBackPower);
        rightFront.set(rightFrontPower);
        rightBack.set(rightBackPower);
    }

    public void stopDrive(){
        leftFront.set(0);
        leftBack.set(0);
        rightFront.set(0);
        rightBack.set(0);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


