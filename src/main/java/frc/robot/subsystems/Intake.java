// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;

import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import frc.robot.Constants;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */

    
public class Intake extends SubsystemBase {
    //L5 = levý motor na zvedání zvedače
    //P6 = pravý motor na zvedání zvedače
    //Spin7 = motor na točení koleček zvedače
    private CANSparkMax intakeLeft;
    private CANSparkMax intakeRight;
    private CANSparkMax intakeSpin;

    private double intakeLeftZeroOffset;
    private double intakeRightZeroOffset;



    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLeft = new CANSparkMax(Constants.ArmConstants.intakeLeftId, MotorType.kBrushless);
        intakeLeft.setInverted(true);
        intakeLeft.setIdleMode(IdleMode.kBrake);
        intakeRight = new CANSparkMax(Constants.ArmConstants.intakeRightId, MotorType.kBrushless);
        intakeRight.setInverted(false);
        intakeRight.setIdleMode(IdleMode.kBrake);
        intakeSpin = new CANSparkMax(Constants.ArmConstants.intakeSpinId, MotorType.kBrushless);
        intakeSpin.setInverted(false);
        resetEncoder();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    public void resetEncoder(){
        intakeLeftZeroOffset = intakeLeft.getEncoder().getPosition();
        intakeRightZeroOffset = intakeRight.getEncoder().getPosition();
    }
    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }
    public void CMDteleOp(CommandXboxController armController){
        if(armController.x().getAsBoolean()){
            intakeSpin.set(Constants.ArmConstants.intakeSpinSpeedIn);
        }
        else if(armController.b().getAsBoolean()){
            intakeSpin.set(Constants.ArmConstants.intakeSpinSpeedOut);
        }
        
        else{
            intakeSpin.set(0);
        }

        if(armController.y().getAsBoolean() && getPosition() < Constants.ArmConstants.intakeMaxPosition){
            if(armController.getLeftTriggerAxis()==0){
            intakeLeft.set(Constants.ArmConstants.intakeSpeedUp);
            intakeRight.set(Constants.ArmConstants.intakeSpeedUp);
            }
            else{intakeLeft.set(0.25*armController.getLeftTriggerAxis());
            intakeRight.set(0.25*armController.getLeftTriggerAxis());}
        }
        else if(armController.a().getAsBoolean() && getPosition() > Constants.ArmConstants.intakeMinPosition){
             if(armController.getLeftTriggerAxis()==0){
            intakeLeft.set(Constants.ArmConstants.intakeSpeedDown);
            intakeRight.set(Constants.ArmConstants.intakeSpeedDown);
            }
        }
        else{
            intakeLeft.set(0);
            intakeRight.set(0);}
        }
 
    
    public void gotoPosition(){

    }

    public double getPosition(){
        return (intakeLeft.getEncoder().getPosition() - intakeLeftZeroOffset) + (intakeRight.getEncoder().getPosition() - intakeRightZeroOffset) *0.5;
    }
    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

