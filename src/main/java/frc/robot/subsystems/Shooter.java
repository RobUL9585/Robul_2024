// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkLowLevel.MotorType;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import frc.robot.Constants;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private CANSparkMax shooterLower;
    private CANSparkMax shooterHigher;


        
    /**
    *
    */
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterHigher = new CANSparkMax(Constants.ArmConstants.shooterHigherId, MotorType.kBrushed);
        shooterHigher.setInverted(true);
        shooterLower = new CANSparkMax(Constants.ArmConstants.shooterLowerId, MotorType.kBrushed);
        shooterLower.setInverted(true);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void autonShoot(double shooterHigherSpeed, double shooterLowerSpeed){
        shooterHigher.set(shooterHigherSpeed);
        shooterLower.set(shooterLowerSpeed);
    }
    public void autonShootStop(){
        shooterHigher.set(0);
        shooterLower.set(0);
    }

    public void CMDteleOp(CommandXboxController armController){
        
        if(armController.rightBumper().getAsBoolean()){
            shooterHigher.set(Constants.ArmConstants.shooterSpeedFastHigher);
            shooterLower.set(Constants.ArmConstants.shooterSpeedFastLower);
        }
        else if(armController.povDown().getAsBoolean()){
            shooterHigher.set(Constants.ArmConstants.shooterSpeedIn);
            shooterLower.set(Constants.ArmConstants.shooterSpeedIn);
        }
        else if (armController.leftBumper().getAsBoolean()){
            shooterHigher.set(Constants.ArmConstants.shooterSpeedSlowHigher);
            shooterLower.set(Constants.ArmConstants.shooterSpeedSlowLower);
        }
        else{
            shooterHigher.set(0);
            shooterLower.set(0);
            }

     }
         @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.


    }



